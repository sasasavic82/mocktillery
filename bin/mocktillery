#! /usr/bin/env node

const program = require('commander');

const { TestType, Mocktillery } = require("../dist/index");

let debug = false;

program
    .command("compile")
    .option("-p, --profile [profile type]", "Test profile")
    .option("-f, --testFunction [function type]", "Load or Functional")
    .option("-t, --testsFolder [tests folder]", "Tests folder")
    .option("-c, --compileFolder [compile folder]", "Compile folder")
    .option("-o, --output [output filename]", "Output filename (no extensions)")
    .option("-d, --debug", "Debug flag")
    .action((cmdObj) => {

        if (!cmdObj.testsFolder)
            throw new Error("Must supply a test folder");
        
        if (!cmdObj.compileFolder)
            throw new Error("Must supply compile folder");
        
        if (!cmdObj.output)
            throw new Error("Must supply output filename");

        if (!cmdObj.testFunction)
            throw new Error("Must supply test function type: load or functional");            

        if(cmdObj.testFunction == "load" && !cmdObj.profile) 
            throw new Error("Must supply load profile: low, medium, high and full"); 
        

        if (cmdObj.debug)
            debug = true;

        const config = {
            type: cmdObj.testFunction,
            testProfile: cmdObj.profile,
            testFolder: cmdObj.testsFolder,
            compileFolder: cmdObj.compileFolder,
            outputFilename: cmdObj.output,
            debug: debug
        }

        console.log(config);
        
        let mocktillery = new Mocktillery(config);
        
        mocktillery.loadTests();
        mocktillery.compile();

    });

program
    .command("evaluate")
    .option("-t, --testFile <file>", "mocktillery test output file")
    .option("-d, --debug", "Debug flag")
    .action((cmdObj) => {

        if (!cmdObj.testFile)
            throw new Error("Must supply mocktillery test output file");
        
        if (cmdObj.debug)
            debug = true;
        
        Mocktillery.evaluateTest(cmdObj.testFile);

    });
    

program.parse(process.argv);