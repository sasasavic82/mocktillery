config:
  plugins:
    expect: {}
  variables:
    payload:
      name: Test
      surname: McTestface
      weight: 90
      height: 185
      addresses:
        - name: Exhibition Street Office
          address: '242 Exhibition Street, Melbourne CBD'
      interests:
        - software engineering
  phases:
    - duration: 20
      arrivalRate: 10
      name: Execute tests at 10 user per second for 5 minutes
  defaults:
    headers:
      x-telstra-mocktillary-id: '{{ $uuid }}'
scenarios:
  - name: 200 OK On Getting Large 100MB File
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                body:
                  largeFilesize: '1'
          capture:
            json: $._link
            as: link
      - get:
          url: '{{ link }}'
          expect:
            - statusCode: 200
  - name: 200 OK On Getting 0.01MB (10kb) Payload
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                body:
                  largePayload: 0.01
          expect:
            - statusCode: 200
  - name: 200 OK On Getting Large 10MB File
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                body:
                  largeFilesize: '1'
          capture:
            json: $._link
            as: link
      - get:
          url: '{{ link }}'
          expect:
            - statusCode: 200
  - name: 200 OK On Getting 0.001MB (1kb) Payload
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                body:
                  largePayload: 0.001
          expect:
            - statusCode: 200
  - name: 200 OK On Getting Large 1MB Payload
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                body:
                  largePayload: 1
          expect:
            - statusCode: 200
  - name: 200 OK On Getting 10MB Payload
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                body:
                  largePayload: 0.1
          expect:
            - statusCode: 200
  - name: 200 OK Response
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 0
            body:
              '[object Object]': null
          expect:
            - statusCode: 200
  - name: 200 OK Request Response Parity
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 0
            body:
              name: Test
              surname: McTestface
              weight: 90
              height: 185
          capture:
            - json: $.name
              as: name
            - json: $.surname
              as: surname
            - json: $.weight
              as: weight
            - json: $.height
              as: height
          expect:
            - statusCode: 200
            - contentType: json
            - equals:
                - '{{ name }}'
                - Test
            - equals:
                - '{{ surname }}'
                - McTestface
            - equals:
                - '{{ weight }}'
                - 90
            - equals:
                - '{{ height }}'
                - 185
  - name: 200 OK On Getting Large 200MB File
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                body:
                  largeFilesize: '2'
          capture:
            json: $._link
            as: link
      - get:
          url: '{{ link }}'
          expect:
            - statusCode: 200
  - name: 413 Payload Too Large On Getting 51MB Payload
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                body:
                  largePayload: 51
          expect:
            - statusCode: 413
  - name: 422 Duplicate Host Header
    flow:
      - post:
          url: /api/v1/mock
          headers:
            Host: test.host.com
          json:
            body: empty
          expect:
            - statusCode: 422
  - name: 431 Request Header Fields Too large
    flow:
      - post:
          url: /api/v1/mock
          headers:
            Large-Header: >-
              
          json:
            body: empty
          expect:
            - statusCode: 431
  - name: 500 Gzip Not Compressed
    flow:
      - post:
          url: /api/v1/mock
          headers:
            X-Mockingbird-Fake-Compression: gzip
          json:
            settings:
              failureProbability: 1
              simulators:
                body:
                  largePayload: 0.01
                  fakeEncoding: true
          expect:
            - statusCode: 500
  - name: 504 Gateway Timeout For Non-Responding Service
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                delay:
                  type: fixed
                  delay: 120000
            body:
              '[object Object]': null
          expect:
            - statusCode: 504
  - name: 200 OK On Getting Large 50MB File
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                body:
                  largeFilesize: '1'
          capture:
            json: $._link
            as: link
      - get:
          url: '{{ link }}'
          expect:
            - statusCode: 200
  - name: Abrupt Connection Reset with 1.0 Probability
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                connection: connection_reset_by_peer
            body:
              '[object Object]': null
          expect:
            - statusCode: 500
  - name: 406 Not Acceptable - Character Encoding Not UTF-8
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                body:
                  encodingScheme: utf-16
            body:
              '[object Object]': null
          expect:
            - statusCode: 406
  - name: Duplicate Content-Length Header With 1.0 Probability
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                header:
                  duplicateHeader: Content-Length
            body:
              '[object Object]': null
          expect:
            - statusCode: 400
  - name: Incorrect Content Length with 1.0 Probability
    flow:
      - post:
          url: /api/v1/mock
          json:
            settings:
              failureProbability: 1
              simulators:
                header:
                  incorrectContentLength: true
            body:
              '[object Object]': null
          expect:
            - statusCode: 400
